#!/usr/bin/perl -w

use strict;
use Getopt::Std;
getopts('f:t:ahc:u:');
use vars qw($opt_f $opt_t $opt_a $opt_h $opt_c $opt_u);

# added by fugu *not* get warnings every script run, if e.g. the rollback log file is empty!
no warnings 'uninitialized';

my $csvfile = "rbacusers.csv";
my $usertxt = "rbacusers.txt";
my $binddn = "cn=rbac,ou=bindaccounts,dc=textgrid,dc=de";
my $pindpw = "<%= scope.lookupvar('dhrep::services::tgauth::binddn_pass') %>";

my @testaccounts = qw (shibconnector@application.int crud.junit1@textgrid.de crud.junit2@textgrid.de testuser@textgrid.de BerndTmp@dariah.eu);
push @testaccounts, map { $_ = sprintf 'functional.tester%d@textgrid.de', $_ } 1..30;

if ($opt_h) {
	print "$0 -a\n";
	print "$0 -f FROM -t TO\n";
	print "\teither get Logs for all (-a) months in LDAP\n";
	print "\tor for the duration from FROM to TO\n";
	print "\tFROM and TO have the format YYYYMMDD, e.g. 20150131 for January 31, 2015\n";
	print "\t-c CSV file to write to instead of $csvfile\n";
	print "\t-u individuals users file to write to instead of $usertxt\n\n";
	exit;
}


my $filter;

if ($opt_a) {
	$filter = '';
} elsif ($opt_f && $opt_t) {
	$csvfile = "$csvfile-$opt_f-$opt_t";
	$usertxt = "$usertxt-$opt_f-$opt_t";
	$filter = "(&(rbacSessionCreationTimestamp>=${opt_f}000000Z)(rbacSessionCreationTimestamp<=${opt_t}000000Z))";
} else {
	system "$0 -h";
	exit;
}


if ($opt_c) {
	$csvfile = $opt_c;
}
if ($opt_u) {
	$usertxt = $opt_u;
}


my $ref_arr = &getlogins($filter);

my @sorted = sort {$a->{time} cmp $b->{time}} @{$ref_arr};

my $from = $sorted[0]->{time};
my $to = $sorted[-1]->{time};

my ($fromyear, $frommonth) = $from =~ m/^(\d{4})(\d{2})/;
my ($toyear, $tomonth) = $to =~ m/^(\d{4})(\d{2})/;

my @months = map { $_ = sprintf '%02d', $_ } 1..12;

my %allusersseen = ();

open CSV, ">$csvfile";

print CSV "YYYY-MM\tAbsoluteNumber\tDistinctUsers\n";
foreach my $y ($fromyear..$toyear) {
	foreach my $m (@months) {

		my @slice = grep { $_->{time} =~ /^$y$m/ }  @sorted;

		my $absnumber = scalar @slice;

		if ( $absnumber > 0 ) {
			my %individualusers = ();
			foreach my $login (@slice) {
				$individualusers{ $login->{user} } = 1;
				$allusersseen{ $login->{user} } = 1;
			}

			my $usernumber = scalar keys %individualusers;
			print "For $y-$m: $absnumber total logins, $usernumber individual users\n";
			print CSV "$y-$m\t$absnumber\t$usernumber\n";
		}
	}
}

close CSV;

print "For control, these were the users seen:\n";
open TXT, ">$usertxt";
foreach my $user (sort keys %allusersseen) {
	print TXT "$user\n";
}
close TXT;

print "\nWrote Data to $csvfile, user list in $usertxt\n";


#haase@textgrid-test1:~$ ldapsearch -x -H ldap://localhost:389 -b ou=sessions,ou=rbac,dc=textgrid,dc=de -D cn=rbac,ou=bindaccounts,dc=textgrid,dc=de -w "I8]IM4h*" '(&(rbacSessionCreationTimestamp>=20150510000000Z)(rbacSessionCreationTimestamp<=20150610000000Z))' rbacSessionUser|perl -ne 'm/rbacSessionUser:+\s+(.*)/; print "$1\n";'
#ldapsearch -x -H ldap://localhost:389 -b ou=sessions,ou=rbac,dc=textgrid,dc=de -D cn=rbac,ou=bindaccounts,dc=textgrid,dc=de -w "I8]IM4h*" '(&(rbacSessionCreationTimestamp>=20150510000000Z)(rbacSessionCreationTimestamp<=20150610000000Z))' rbacSessionUser rbacSessionCreationTimestamp|perl -ne 'if (/^(dn:|search:)/){print "$c $u\n"} if (m/rbacSessionUser:+\s+(.*)/) {$u=$1}; if (m/rbacSessionCreationTimestamp:+\s+(.*)/) {$c=$1}' |less


sub getlogins {
	my ($filter) = @_;

	my @a = ();

	open L, "ldapsearch -x -H ldap://localhost:389 -b ou=sessions,ou=rbac,dc=textgrid,dc=de -D $binddn  -w '$pindpw' '$filter' rbacSessionUser rbacSessionCreationTimestamp|perl -ne 'if (/^(dn:|search:)/){print \"\$c \$u\\\n\"} if (m/rbacSessionUser:+\\s+(.*)/) {\$u=\$1}; if (m/rbacSessionCreationTimestamp:+\\s+(.*)/) {\$c=\$1}'|";

	while (<L>) {
		if (m/^(\S+) (\S+)/) {
			if (grep /$2/, @testaccounts) {
				next;
			}

			push @a, {time=>$1,user=>$2};
#    print "$1 $2\n";
		}
	}

	return \@a;
}
