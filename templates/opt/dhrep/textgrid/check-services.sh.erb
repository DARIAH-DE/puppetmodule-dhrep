#!/bin/bash

#
# get report param
#
R=true
while getopts ":s" opt; do
  case $opt in
    s)
      R=false
   esac
done

#
# generics
#
ERRORS=false
ERRSTR="Failed service(s):"
SERVER="http://localhost"
CNRM="$(tput sgr0)"
OK="$(tput setaf 2)OK$CNRM"
FAILED="$(tput setaf 1)FAILED$CNRM"
CSTR="$(tput setaf 5)"
VSTR="$(tput setaf 3)"
TRN="  ==>  "

#
# tgauth
#
FILE="tgextra.wsdl"
AUTH=$SERVER"/1.0/tgauth/wsdl/"$FILE
if $R; then echo "checking "$CSTR"tgauth"$CNRM $TRN $AUTH; fi
wget -q $AUTH
if [ -s $FILE ]; then
    rm $FILE
    if $R; then echo "    $OK"; fi
else
    if $R; then echo "    $FAILED"; fi
    rm -f $FILE
    ERRORS=true
    ERRSTR=$ERRSTR" tgauth"
fi

#
# tgauth-crud
#
FILE="tgextra-crud.wsdl"
AUTH=$SERVER"/1.0/tgauth/wsdl/"$FILE
if $R; then echo "checking "$CSTR"tgauth_crud"$CNRM $TRN $AUTH; fi
wget -q $AUTH
if [ -s $FILE ]; then
    rm $FILE
    if $R; then echo "    $OK"; fi
else
    if $R; then echo "    $FAILED"; fi
    rm -f $FILE
    ERRORS=true
    ERRSTR=$ERRSTR" tgauth-crud"
fi

#
# tgcrud
#
FILE="version"
CRUD=$SERVER"/1.0/tgcrud/rest/"$FILE
if $R; then echo "checking "$CSTR"tgcrud"$CNRM $TRN $CRUD; fi
wget -q $CRUD
if [ -s $FILE ]; then
    if $R; then echo -n "    $OK ["$VSTR; fi
    if $R; then cat $FILE; fi
    rm $FILE
    if $R; then echo $CNRM"]"; fi
else
    if $R; then echo "    $FAILED"; fi
    rm -f $FILE
    ERRORS=true
    ERRSTR=$ERRSTR" tgcrud"
fi

#
# tgcrud public
#
FILE="version"
CRUD=$SERVER"/1.0/tgcrud-public/rest/"$FILE
if $R; then echo "checking "$CSTR"tgcrud public"$CNRM $TRN $CRUD; fi
wget -q $CRUD
if [ -s $FILE ]; then
    if $R; then echo -n "    $OK ["$VSTR; fi
    if $R; then cat $FILE; fi
    rm $FILE
    if $R; then echo $CNRM"]"; fi
else
    if $R; then echo "    $FAILED"; fi
    rm -f $FILE
    ERRORS=true
    ERRSTR=$ERRSTR" tgcrud-public"
fi

#
# tgsearch
#
FILE="search?q=fu"
SEARCH=$SERVER"/1.0/tgsearch/"$FILE
if $R; then echo "checking "$CSTR"tgsearch"$CNRM $TRN $SEARCH; fi
wget -q $SEARCH
if [ -s $FILE ]; then
    rm $FILE
    if $R; then echo "    $OK"; fi
else
    if $R; then echo "    $FAILED"; fi
    rm -f $FILE
    ERRORS=true
    ERRSTR=$ERRSTR" tgsearch"
fi

#
# tgsearch public
#
FILE="search?q=fu"
SEARCH=$SERVER"/1.0/tgsearch-public/"$FILE
if $R; then echo "checking "$CSTR"tgsearch public"$CNRM $TRN $SEARCH; fi
wget -q $SEARCH
if [ -s $FILE ]; then
    rm $FILE
    if $R; then echo "    $OK"; fi
else
    if $R; then echo "    $FAILED"; fi
    rm -f $FILE
    ERRORS=true
    ERRSTR=$ERRSTR" tgsearch-public"
fi

#
# aggregator
#
FILE="version"
AGGREGATOR=$SERVER"/1.0/aggregator/"$FILE
if $R; then echo "checking "$CSTR"aggregator"$CNRM $TRN $AGGREGATOR; fi
wget -q $AGGREGATOR
if [ -s $FILE ]; then
    if $R; then echo -n "    $OK ["$VSTR; fi
    URGL=`cat version | grep Version:`;
    if $R; then echo -n ${URGL#*<em>}; fi
    rm $FILE
    if $R; then echo $CNRM"]"; fi
else
    if $R; then echo "    $FAILED"; fi
    rm -f $FILE
    ERRORS=true
    ERRSTR=$ERRSTR" aggreagtor"
fi

#
# tgpublish
#
FILE="version"
PUBLISH=$SERVER"/1.0/tgpublish/"$FILE
if $R; then echo "checking "$CSTR"tgpublish"$CNRM $TRN $PUBLISH; fi
wget -q $PUBLISH
if [ -s $FILE ]; then
    if $R; then echo -n "    $OK ["$VSTR; fi
    if $R; then cat $FILE; fi
    rm $FILE
    if $R; then echo $CNRM"]"; fi
else
    if $R; then echo "    $FAILED"; fi
    rm -f $FILE
    ERRORS=true
    ERRSTR=$ERRSTR" tgpublish"
fi

#
# oaipmh
#
FILE="version"
OAIPMH=$SERVER"/1.0/tgoaipmh/oai/"$FILE
if $R; then echo "checking "$CSTR"tgoaipmh"$CNRM $TRN $OAIPMH; fi
wget -q $OAIPMH
if [ -s $FILE ]; then
    if $R; then echo -n "    $OK ["$VSTR; fi
    if $R; then cat $FILE; fi
    rm $FILE
    if $R; then echo $CNRM"]"; fi
else
    if $R; then echo "    $FAILED"; fi
    rm -f $FILE
    ERRORS=true
    ERRSTR=$ERRSTR" tgoaipmh"
fi

#
# pid
#
FILE="version"
PID=$SERVER"/1.0/tgpid/"$FILE
if $R; then echo "checking "$CSTR"tgpid"$CNRM $TRN $PID; fi
wget -q $PID
if [ -s $FILE ]; then
    if $R; then echo -n "    $OK ["$VSTR; fi
    if $R; then cat $FILE; fi
    rm $FILE
    if $R; then echo $CNRM"]"; fi
else
    if $R; then echo "    $FAILED"; fi
    rm -f $FILE
    ERRORS=true
    ERRSTR=$ERRSTR" tgpid"
fi

#
# digilib
#
INFO="info"
DIGILIB=$SERVER"/1.0/digilib/rest/"$INFO
if $R; then echo "checking "$CSTR"digilib"$CNRM $TRN $DIGILIB; fi
wget -q $DIGILIB
if [ -s $INFO ]; then
    rm $INFO
    if $R; then echo "    $OK"; fi
else
    if $R; then echo "    $FAILED"; fi
    rm -f $FILE
    ERRORS=true
    ERRSTR=$ERRSTR" tgdigilib"
fi

#
# wildfly
#
FILE="wildfly"
WILDFLY=$SERVER":18080/jolokia/read/java.lang:type=Runtime/Uptime"
if $R; then echo "checking "$CSTR"wildfly"$CNRM" (intern)"$TRN $WILDFLY; fi
curl -s $WILDFLY > $FILE
URGL=`grep \"status\":200 $FILE`
URGL=`echo ${URGL: -13:12}`
if [ -s $FILE ] && [ "$URGL" = "\"status\":200"  ] ; then
    if $R; then echo -n "    $OK ["$VSTR; fi
    if $R; then echo -n $URGL; fi
    rm $FILE
    if $R; then echo $CNRM"]"; fi
else
    if $R; then echo "    $FAILED"; fi
    rm $FILE
    ERRORS=true
    ERRSTR=$ERRSTR" tgwildfly"
fi

#
# iiifmd
#
INFO="collection.json"
IIIFMD=$SERVER"/1.0/iiif/manifests/"$INFO
if $R; then echo "checking "$CSTR"iiifmd"$CNRM $TRN $IIIFMD; fi
wget -q $IIIFMD
if [ -s $INFO ]; then
    rm $INFO
    if $R; then echo "    $OK"; fi
else
    if $R; then echo "    $FAILED"; fi
    rm -f $FILE
    ERRORS=true
    ERRSTR=$ERRSTR" tgiiifmd"
fi

#
# sesame nonpublic
#
HEADER="Accept: application/sparql-results+xml"
SESAME=$SERVER"/1.0/triplestore?query=info"
if $R; then echo "checking "$CSTR"sesame nonpublic"$CNRM $TRN $SESAME; fi
URGL=`curl -H "${HEADER}" -s "${SESAME}" | grep -m 1 -o "textgrid-nonpublic"`
if [ "$URGL" = 'textgrid-nonpublic' ]; then
    if $R; then echo -n "    $OK ["$VSTR; fi
    if $R; then echo -n $URGL; fi
    if $R; then echo $CNRM"]"; fi
else
    if $R; then echo "    $FAILED"; fi
    ERRORS=true
    ERRSTR=$ERRSTR" sesame"
fi

#
# sesame public
#
HEADER="Accept: application/sparql-results+xml"
SESAME=$SERVER"/1.0/triplestore?query=info"
if $R; then echo "checking "$CSTR"sesame public"$CNRM $TRN $SESAME; fi
URGL=`curl -H "${HEADER}" -s "${SESAME}" | grep -m 1 -o "textgrid-public"`
if [ "$URGL" = 'textgrid-public' ]; then
    if $R; then echo -n "    $OK ["$VSTR; fi
    if $R; then echo -n $URGL; fi
    if $R; then echo $CNRM"]"; fi
else
    if $R; then echo "    $FAILED"; fi
    ERRORS=true
    ERRSTR=$ERRSTR" sesame-public"
fi

#
# elasticsearch masternode
#
FILE="curl"
MASTERNODE=$SERVER":<%= @elasticsearch_master_http_port %>"
if $R; then echo "checking "$CSTR"es masternode"$CNRM" (intern)"$TRN $MASTERNODE; fi
curl -s $MASTERNODE > $FILE
URGL=`grep "200" curl`
if [ -s $FILE -a  "$URGL" = '  "status" : 200,' ]; then
    if $R; then echo -n "    $OK ["$VSTR; fi
    if $R; then echo -n $URGL; fi
    if $R; then echo $CNRM"]"; fi
    rm $FILE
else
    if $R; then echo "    $FAILED"; fi
    rm -f $FILE
    ERRORS=true
    ERRSTR=$ERRSTR" es-masternode"
fi

#
# elasticsearch workhorse
#
FILE="curl"
WORKHORSE=$SERVER":<%= @elasticsearch_workhorse_http_port %>"
if $R; then echo "checking "$CSTR"es workhorse"$CNRM" (intern)"$TRN $WORKHORSE; fi
curl -s $WORKHORSE > $FILE
URGL=`grep "200" $FILE`
if [ -s $FILE ] && [ "$URGL" = '  "status" : 200,' ]; then
    if $R; then echo -n "    $OK ["$VSTR; fi
    if $R; then echo -n $URGL; fi
    if $R; then echo $CNRM"]"; fi
    rm $FILE
else
    if $R; then echo "    $FAILED"; fi
    rm -f $FILE
    ERRORS=true
    ERRSTR=$ERRSTR" es-workhorse"
fi

#
# fits core
#
FILE="/opt/dhrep/output"
FITS_VERSION=1.2.0
if $R; then echo "checking "$CSTR"fits core"$CNRM" (intern)"$TRN; fi
cd /home/tomcat-fits/fits-$FITS_VERSION
./fits.sh -i License.md -o $FILE
URGL=`grep toolname=\"FITS\" $FILE`
URGL=`echo ${URGL:85:5}`
if [ -s $FILE ] && [ "$URGL" = "$FITS_VERSION"  ] ; then
    if $R; then echo -n "    $OK ["$VSTR; fi
    if $R; then echo -n $URGL; fi
    rm $FILE
    rm fits.log
    if $R; then echo $CNRM"]"; fi
else
    if $R; then echo "    $FAILED"; fi
    rm -f $FILE
    rm -f fits.log
    ERRORS=true
    ERRSTR=$ERRSTR" fits-core"
fi

#
# fits service
#
FILE="version"
FITS=$SERVER":<%= @fits_port %>/fits/"$FILE
if $R; then echo "checking "$CSTR"fits service"$CNRM" (intern)"$TRN $FITS; fi
wget -q $FITS
if [ -s $FILE ]; then
    if $R; then echo -n "    $OK ["$VSTR; fi
    if $R; then cat $FILE | xargs echo -n; fi
    rm $FILE
    if $R; then echo $CNRM"]"; fi
else
    if $R; then echo "    $FAILED"; fi
    rm -f $FILE
    ERRORS=true
    ERRSTR=$ERRSTR" fits-service"
fi

#
# static metadata schema
#
FILE="textgrid-metadata_2010.xsd"
SCHEMA=$SERVER"/schema/"$FILE
EQSI=30757
if $R; then echo "checking "$CSTR"static metadata schema"$CNRM $TRN $SCHEMA; fi
wget -q $SCHEMA
SIZE=$(stat -c%s "$FILE")
rm $FILE
if [ $SIZE -eq $EQSI ]; then
    if $R; then echo "    $OK [$SIZE == $EQSI]"; fi
else
    if $R; then echo "    $FAILED [$SIZE != $EQSI]"; fi
    ERRORS=true
    ERRSTR=$ERRSTR" metadata-schema"
fi

#
# check for errors
#
if $ERRORS; then
    # Nagios ERROR
    echo "Service checks FAILED! "$ERRSTR
    exit 2
fi

echo "Service checks turn out to be OK"
exit 0
