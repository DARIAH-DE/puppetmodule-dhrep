#!/bin/bash

#
# get report param
#
R=true
while getopts ":s" opt; do
  case $opt in
    s)
      R=false
   esac
done

#
# generics
#
ERRORS=false
SERVER="http://localhost"
CNRM="$(tput sgr0)"
OK="$(tput setaf 2)OK$CNRM"
FAILED="$(tput setaf 1)FAILED$CNRM"
CSTR="$(tput setaf 5)"
VSTR="$(tput setaf 3)"
TRN="  ==>  "

#
# dhcrud
#
FILE="version"
CRUD=$SERVER":<%= @crud_port %>/dhcrud-public/"$FILE
if $R; then echo "checking "$CSTR"dhcrud"$CNRM" (intern)"$TRN $CRUD; fi
curl -s $CRUD > $FILE
if [ -s $FILE ]; then
    if $R; then echo -n "    $OK ["$VSTR; fi
    if $R; then cat $FILE; fi
    rm $FILE
    if $R; then echo $CNRM"]"; fi
else
    if $R; then echo "    $FAILED"; fi
    rm $FILE
    ERRORS=true
fi

#
# dhcrud (public) don't worry, it is correct this way :-)
#
FILE="version"
CRUD=$SERVER":<%= @crud_port %>/dhcrud/"$FILE
if $R; then echo "checking "$CSTR"dhcrud public"$CNRM $TRN $CRUD; fi
curl -s $CRUD > $FILE
if [ -s $FILE ]; then
    if $R; then echo -n "    $OK ["$VSTR; fi
    if $R; then cat $FILE; fi
    rm $FILE
    if $R; then echo $CNRM"]"; fi
else
    if $R; then echo "    $FAILED"; fi
    rm $FILE
    ERRORS=true
fi

#
# dhpublish
#
FILE="version"
PUBLISH=$SERVER":<%= @publish_port %>/dhpublish/"$FILE
if $R; then echo "checking "$CSTR"dhpublish"$CNRM $TRN $PUBLISH; fi
curl -s $PUBLISH > $FILE
if [ -s $FILE ]; then
    if $R; then echo -n "    $OK ["$VSTR; fi
    if $R; then cat $FILE; fi
    rm $FILE
    if $R; then echo $CNRM"]"; fi
else
    if $R; then echo "    $FAILED"; fi
    rm $FILE
    ERRORS=true
fi

#
# publikator
#
FILE="publikator"
PUBLIKATOR=$SERVER"/"$FILE
if $R; then echo "checking "$CSTR"publikator"$CNRM $TRN $PUBLIKATOR; fi
curl -Lks $PUBLIKATOR > $FILE
URGL=`grep \<span\>DARIAH-DE $FILE`
URGL=`echo ${URGL:35:5}`
if [ -s $FILE ]; then
    if $R; then echo -n "    $OK ["$VSTR; fi
    if $R; then echo -n $URGL; fi
    rm $FILE
    if $R; then echo $CNRM"]"; fi
else
    if $R; then echo "    $FAILED"; fi
    rm $FILE
    ERRORS=true
fi

#
# oaipmh
#
FILE="version"
OAIPMH=$SERVER":<%= @oaipmh_port %>/oaipmh/oai/"$FILE
if $R; then echo "checking "$CSTR"oaipmh"$CNRM $TRN $OAIPMH; fi
curl -s $OAIPMH > $FILE
if [ -s $FILE ]; then
    if $R; then echo -n "    $OK ["$VSTR; fi
    if $R; then cat $FILE; fi
    rm $FILE
    if $R; then echo $CNRM"]"; fi
else
    if $R; then echo "    $FAILED"; fi
    rm $FILE
    ERRORS=true
fi

#
# pid
#
FILE="version"
PID=$SERVER":<%= @pid_port %>/dhpid/"$FILE
if $R; then echo "checking "$CSTR"dhpid"$CNRM" (intern)"$TRN $PID; fi
curl -s $PID > $FILE
if [ -s $FILE ]; then
    if $R; then echo -n "    $OK ["$VSTR; fi
    if $R; then cat $FILE; fi
    rm $FILE
    if $R; then echo $CNRM"]"; fi
else
    if $R; then echo "    $FAILED"; fi
    rm $FILE
    ERRORS=true
fi

#
# digilib
#
INFO="info"
DIGILIB=$SERVER"/1.0/digilib/rest/"$INFO
if $R; then echo "checking "$CSTR"digilib"$CNRM $TRN $DIGILIB; fi
wget -q $DIGILIB
if [ -s $INFO ]; then
    rm $INFO
    if $R; then     echo "    $OK"; fi
else
    if $R; then echo "    $FAILED"; fi
    rm -f $FILE
    ERRORS=true
fi

#
# wildfly
#
FILE="wildfly"
WILDFLY=$SERVER":18080/jolokia/read/java.lang:type=Runtime/Uptime"
if $R; then echo "checking "$CSTR"wildfly"$CNRM" (intern)"$TRN $WILDFLY; fi
curl -s $WILDFLY > $FILE
URGL=`grep \"status\":200 $FILE`
URGL=`echo ${URGL: -13:12}`
if [ -s $FILE ] && [ "$URGL" = "\"status\":200"  ] ; then
    if $R; then echo -n "    $OK ["$VSTR; fi
    if $R; then echo -n $URGL; fi
    rm $FILE
    if $R; then echo $CNRM"]"; fi
else
    if $R; then echo "    $FAILED"; fi
    rm $FILE
    ERRORS=true
fi

#
# iiifmd
#
INFO="collection.json"
IIIFMD=$SERVER"/1.0/iiif/manifests/"$INFO
if $R; then echo "checking "$CSTR"iiifmd"$CNRM $TRN $IIIFMD; fi
wget -q $IIIFMD
if [ -s $INFO ]; then
    rm $INFO
    if $R; then echo "    $OK"; fi
else
    if $R; then echo "    $FAILED"; fi
    rm -f $FILE
    ERRORS=true
fi

#
# elasticsearch masternode
#
FILE="curl"
MASTERNODE=$SERVER":<%= @elasticsearch_master_http_port %>"
if $R; then echo "checking "$CSTR"es masternode"$CNRM" (intern)"$TRN $MASTERNODE; fi
curl -s $MASTERNODE > $FILE
URGL=`grep "200" curl`
if [ -s $FILE -a  "$URGL" = '  "status" : 200,' ]; then
    if $R; then echo -n "    $OK ["$VSTR; fi
    if $R; then echo -n $URGL; fi
    rm $FILE
    if $R; then echo $CNRM"]"; fi
else
    if $R; then echo "    $FAILED"; fi
    rm $FILE
    ERRORS=true
fi

#
# elasticsearch workhorse
#
FILE="curl"
WORKHORSE=$SERVER":<%= @elasticsearch_workhorse_http_port %>"
if $R; then echo "checking "$CSTR"es workhorse"$CNRM" (intern)"$TRN $WORKHORSE; fi
curl -s $WORKHORSE > $FILE
URGL=`grep "200" $FILE`
if [ -s $FILE ] && [ "$URGL" = '  "status" : 200,' ]; then
    if $R; then echo -n "    $OK ["$VSTR; fi
    if $R; then echo -n $URGL; fi
    rm $FILE
    if $R; then echo $CNRM"]"; fi
else
    if $R; then echo "    $FAILED"; fi
    rm $FILE
    ERRORS=true
fi

#
# fits core
#
FILE="/opt/dhrep/output"
FITS_VERSION=1.2.0
if $R; then echo "checking "$CSTR"fits core"$CNRM" (intern)"$TRN; fi
cd /home/tomcat-fits/fits-$FITS_VERSION
./fits.sh -i License.md -o $FILE
URGL=`grep toolname=\"FITS\" $FILE`
URGL=`echo ${URGL:85:5}`
if [ -s $FILE ] && [ "$URGL" = "$FITS_VERSION"  ] ; then
    if $R; then echo -n "    $OK ["$VSTR; fi
    if $R; then echo -n $URGL; fi
    rm $FILE
    rm fits.log
    if $R; then echo $CNRM"]"; fi
else
    if $R; then echo "    $FAILED"; fi
    rm $FILE
    rm fits.log
    ERRORS=true
fi

#
# fits service
#
FILE="version"
FITS=$SERVER":<%= @fits_port %>/fits/"$FILE
if $R; then echo "checking "$CSTR"fits service"$CNRM" (intern)"$TRN $FITS; fi
curl -s $FITS > $FILE
if [ -s $FILE ]; then
    if $R; then echo -n "    $OK ["$VSTR; fi
    if $R; then cat $FILE | xargs echo -n; fi
    rm $FILE
    if $R; then echo $CNRM"]"; fi
else
    if $R; then echo "    $FAILED"; fi
    rm $FILE
    ERRORS=true
fi

#
# check for errors
#
if $ERRORS; then
    if $R; then echo "...service check $FAILED with exit code 2! Nagios --> FAILED/ERROR"; fi
    exit 2
fi

if $R; then echo "...service check turns out to be $OK"; fi
exit 0
